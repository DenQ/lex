{"version":3,"sources":["common/@interfaces/settings.ts","common/@types/entity.ts","common/utils/initializer/local-storage.js","common/contexts/refetch-context.js","common/utils/url-manager/index.js","common/@contants/settings.ts","api/settings.ts","common/utils/settings/utils.ts","common/contexts/settings/index.tsx","common/context-providers/settings/index.tsx","lib/modals/SimpleConfirmation/index.tsx","lib/text/index.tsx","app/system/toolbar/index.js","app/system/layout/index.js","common/@interfaces/words.ts","api/folders.ts","api/words.ts","lib/progress/label/types.ts","app/folders/@common/hooks/removeFolder.tsx","app/folder/play/constants.ts","common/utils/get-percent/index.ts","common/utils/folder/folder-progress/index.ts","app/folders/@common/utils/transform-folders/transformFolders.ts","app/folders/@common/hooks/fetchFolders.tsx","app/folders/@common/hooks/addEventHandler.ts","app/folders/@common/components/ActionBar/index.tsx","lib/tables/general/index.tsx","lib/progress/label/utils/getColor.ts","app/folders/@types/list.ts","lib/progress/label/ProgressLabel.tsx","app/folders/TableView/components/list/ProgressColumn.tsx","app/folders/@common/utils/getUrl.ts","app/folders/TableView/components/list/SystemColumn.tsx","app/folders/TableView/index.tsx","app/folders/TableView/components/list/index.tsx","app/folders/TableView/components/list/columns.tsx","app/folders/@common/components/AlertNoData/index.tsx","app/folders/index.tsx","lib/tables/general/components/system-column/index.tsx","common/utils/random-integer/index.ts","lib/tables/general/utsils/get-mock-rows/index.ts","app/ping/index.tsx","lib/tables/general/columns/columns-definitions.tsx","common/@types/words.ts","common/modules/validation/index.ts","common/modules/validation/validators/unique-string/index.ts","common/modules/validation/utils/prepare-validation-errors.ts","common/modules/validation/@messages/index.ts","app/words/form/validationSchema.ts","common/utils/find-by-key-value/index.ts","app/words/form/utils/has-not-unique/index.ts","app/words/form/hooks/validate/index.tsx","app/words/form/utils/index.js","app/folder/form/components/text-component/index.js","app/words/form/components/input-control/index.js","app/words/form/index.js","app/words/presenter/details/index.js","app/words/presenter/index.js","app/words/list/index.js","app/words/list/utils/ordering.ts","app/words/list/hooks/get-list/index.tsx","app/folder/components/layout/index.js","common/components/bread-crumbs/index.js","lib/modals/confirmation/index.tsx","app/folder/constants.js","app/folder/components/header/index.js","lib/modals/confirmation/hook.tsx","common/@types/folder.ts","app/folder/form/utils/index.js","app/folder/form/index.js","app/folder/utils/index.ts","app/folder/show/index.js","app/folder/edit/index.js","app/folder/add/index.js","common/components/no-data/index.js","app/folder/play/components/explored/index.tsx","app/folder/play/components/list/index.tsx","app/folder/play/components/statistic-info/index.tsx","app/folder/play/utils/buildBreadCrumbsProps.ts","app/folder/play/utils/setRate.ts","app/folder/play/hooks/selectWordHandler.ts","app/folder/play/utils/handleSortList.ts","app/folder/play/utils/getWeakestWord.ts","app/folder/play/utils/getRange.ts","app/folder/play/hooks/fetchList.ts","app/folder/play/index.tsx","app/folder/play/hooks/restartFolderHandler.ts","lib/form/base-form/components/footer/index.tsx","lib/form/base-form/index.tsx","lib/form/text-field/index.tsx","common/@types/settings.ts","app/settings/form/components/footer/index.tsx","common/@messages/errors.ts","app/settings/form/validation-schema.ts","app/settings/form/constants.ts","app/settings/form/utils.ts","app/settings/form/index.tsx","app/settings/form/hooks/fetch/index.tsx","app/settings/components/header/index.tsx","app/settings/index.tsx","app/settings/utils.ts","App.js","serviceWorker.js","index.tsx","app/folders/@common/components/AlertNoData/AlertNoData.module.scss","app/folder/play/components/list/ListPlay.module.scss"],"names":["SettingsFields","FOLDERS","WORDS","SETTINGS","defaultEntityView","list","meta","lastId","keyValueEntityView","payload","React","createContext","wordsReload","setWordsReload","foldersReload","setFoldersReload","urls","replaceUrl","url","id","replace","add","show","edit","play","defaultSettings","PlayMaxCountWins","PlayCountWords","eject","a","entitySerialized","window","localStorage","getItem","entityTypes","entity","JSON","parse","result","inject","newEntitySerialized","stringify","setItem","fetchSettings","updateSettings","data","preparePayload","initialValues","settings","actions","reload","SettingsContext","useSettings","useContext","SettingsProvider","children","useState","settingsValue","setSettingsValue","Date","needReload","setNeedReload","useCallback","useEffect","then","response","Provider","value","SimpleConfirmation","title","message","onYes","onNo","isShow","Dialog","fullWidth","open","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","variant","Text","align","others","Typography","useStyles","makeStyles","theme","menuButton","marginRight","spacing","link","flexGrow","ToolbarComponent","props","classes","isHome","urlToHome","urlManager","history","useHistory","showSettingsButton","test","location","pathname","linkToHome","IconButton","edge","className","aria-label","to","AppBar","position","Toolbar","e","preventDefault","push","defaultProps","root","GeneralLayout","WordFields","foldersEntitySerialized","findById","find","item","Number","findAll","removeById","newList","filter","hasRemoveItem","length","Promise","resolve","ProgressGrade","criteria","removeByFolderId","folderId","folder_id","updateById","word","newWord","map","Id","updateByFolderId","counterUpdated","useRemoveFolder","afterSuccessHandler","removeCandidate","setRemoveCandidate","confirmYes","Error","r","console","error","confirmNo","noDataProps","getPercent","value1","value2","nominal","calculateProgress","maxCountWins","maxAvailableValueList","_","chain","wins","number_of_wins","sum","getListWords","findAllWords","transform","listFolders","foldersMap","Map","i","itemFolder","words","progress","play_max_count_wins","set","get","useFetchFolders","setList","loading","setLoading","fetch","transformedResponse","isEmpty","noData","useAddEventHandler","event","stopPropagation","ItemActionRight","styled","Grid","textAlign","ItemTextRight","paddingLeft","BarFolders","addEventHandler","Box","sx","border","borderRadius","padding","container","xs","size","TableComponent","density","pageSize","headerColumnSimpleView","checkboxSelectionMode","rent","columnProps","disableColumnMenu","disableColumnFilter","disableColumnSelector","checkboxSelectionProps","disableSelectionOnClick","checkboxSelection","autoHeight","fontWeight","ActionName","ProgressLabel","percentValue","text","first","second","Chip","label","ProgressColumn","Math","round","getUrl","actionName","row","SystemColumn","removeHandler","handleClickAction","remove","TableFolders","columns","field","headerName","width","headerAlign","headerClassName","flex","sortable","renderCell","cellParams","sortComparator","b","v1","v2","folder1","api","getRow","folder2","getColumns","rows","AlertNoData","Alert","severity","styles","component","AlertTitle","aria-hidden","ListFoldersPage","justifyContent","ActionBar","TableView","memo","alert","randomInteger","min","max","floor","random","getMockRows","Array","fill","index","lastName","faker","name","firstName","age","PingPage","type","fieldNames","PropTypes","shape","number","isRequired","string","validators","uniqueStringValidator","helper","fieldKey","hasNotUnique","utils","prepareValidationErrors","errors","details","forEach","key","context","messages","validationWordSchema","Joi","object","required","custom","customValidators","findByKeyValue","collection","String","toLowerCase","values","targetEntity","useValidate","validate","validationErrors","validationUtils","submitHandler","onSuccessSubmit","form","ejectWords","injectWords","TextComponent","input","placeholder","readOnly","Component","disabled","fieldName","display","EntityForm","handleRemove","RefreshContext","onClickRemove","isCanRemove","useMemo","onSubmit","log","setTimeout","restart","render","handleSubmit","valid","dirty","native","translation","ListItem","button","PresenterComponent","isNew","noop","WordsListPage","needRefresh","setNeedRefresh","prepareList","orderBy","orderListByName","l","results","useGetList","isShowListHeader","catch","m","List","propTypes","textDecoration","Breadcrumbs","separator","fontSize","arrayOf","Transition","forwardRef","ref","Slide","direction","timeout","ConfirmationModal","onCancel","maxWidth","TransitionComponent","aria-labelledby","aria-describedby","controlNames","controls","breadcrumbsProps","onConfirmation","setOpen","reset","toOpen","useConfirmationModal","collectionControls","includes","breadcrumbs","ejectFolders","injectFolders","useFindById","match","params","setEntity","modelResult","buildBreadCrumbsProps","folderName","undefined","NoDataComponent","paragraph","PlayExplored","restartFolderHandler","PlayList","targetWord","handleSelectWord","vector","errorItem","getTitle","WordTransaction","WordNative","targetTitle","selectedWord","isError","PlayStatisticInfo","alignItems","mr","LinearProgress","minWidth","setRate","isSuccess","attempts","number_of_attempts","NumberOfAttempt","NumberOfWins","useSelectWordHandler","setErrorItem","handleSortList","getWeakestWord","minBy","getRange","limit","sortBy","slice","useFetchList","setTargetWord","setVector","setProgress","setNoData","FolderId","PlayPage","useRestartFolder","BaseFormHeader","BaseForm","debug","validationSchema","Footer","makeValidate","formProps","TextField","showError","showErrorOnBlur","FormFooter","errorMessages","Yup","positive","integer","fieldLabels","changeSettings","afterSuccessSubmit","afterErrorSubmit","SettingsForm","setSettings","initValues","useFetch","Header","breadCrumbs","SettingsPage","justify","App","refreshContextValue","path","ShowFolder","AddFolder","EditFolder","PlayFolder","ListFolders","Boolean","hostname","createTheme","ReactDOM","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b7c60144.chunk.js","sourcesContent":["export enum SettingsFields {\n  PlayCountWords = 'play_count_words',\n  PlayMaxCountWins = 'play_max_count_wins'\n}\n\nexport type Settings = {\n  [SettingsFields.PlayCountWords]: number;\n  [SettingsFields.PlayMaxCountWins]: number;\n};\n\ntype MetaSettings = {};\n\nexport type EjectSettings = {\n  payload: Settings;\n  meta: MetaSettings;\n};\n","export default {\n\tFOLDERS: 'folders',\n\tWORDS: 'words',\n\tSETTINGS: 'settings',\n};\n","import entityTypes from 'common/@types/entity';\n\nconst defaultEntityView = {\n\tlist: [],\n\tmeta: {\n\t\tlastId: 0,\n\t},\n};\n\nconst keyValueEntityView = {\n\tpayload: {},\n\tmeta: {},\n};\n\nexport default () => {\n\t[entityTypes.FOLDERS, entityTypes.WORDS].forEach(key => {\n\t\tif (!window.localStorage.getItem(key)) {\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(defaultEntityView));\n\t\t}\n\t});\n\t[entityTypes.SETTINGS].forEach(key => {\n\t\tif (!window.localStorage.getItem(key)) {\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(keyValueEntityView));\n\t\t}\n\t});\n};\n","import React from 'react';\n\nexport default React.createContext({\n\twordsReload: 0,\n\tsetWordsReload: () => {},\n\n\tfoldersReload: 0,\n\tsetFoldersReload: () => {},\n});\n","export const urls = {\n\tHOME: '/',\n\tFOLDER: '/folder',\n\tFOLDERS: '/folders',\n\tFOLDER_ADD: '/folders/add',\n\tFOLDER_EDIT: '/folders/:id/edit',\n\tFOLDER_SHOW: '/folders/:id/show',\n\tFOLDER_PLAY: '/folders/:id/play',\n\tSETTINGS: '/settings',\n\tPING: '/ping',\n};\n\nconst replaceUrl = (url, id) => url.replace(':id', id);\n\nexport default {\n\tping: () => urls.PING,\n\thome: () => urls.HOME,\n\tsettings: () => urls.SETTINGS,\n\tfolders: () => urls.FOLDERS,\n\tfolder: () => ({\n\t\tadd: () => urls.FOLDER_ADD,\n\t\tshow: id => replaceUrl(urls.FOLDER_SHOW, id),\n\t\tedit: id => replaceUrl(urls.FOLDER_EDIT, id),\n\t\tplay: id => replaceUrl(urls.FOLDER_PLAY, id),\n\t}),\n};\n","import { Settings, SettingsFields } from '../@interfaces/settings';\n\nexport const defaultSettings = {\n\t[SettingsFields.PlayMaxCountWins]: 2,\n\t[SettingsFields.PlayCountWords]: 10,\n} as Settings;\n","import entityTypes from 'common/@types/entity';\nimport { EjectSettings, Settings } from 'common/@interfaces/settings';\nimport { defaultSettings } from 'common/@contants/settings';\n\nexport const eject = async (): Promise<EjectSettings> => {\n  const entitySerialized = window.localStorage.getItem(\n    entityTypes.SETTINGS\n  ) as string;\n  const entity = JSON.parse(entitySerialized);\n  const result = await entity;\n\n  return result;\n};\n\nexport const inject = async ({\n  meta,\n  payload,\n}: EjectSettings): Promise<void> => {\n  const newEntitySerialized = JSON.stringify({\n    meta,\n    payload,\n  }) as string;\n\n  await window.localStorage.setItem(entityTypes.SETTINGS, newEntitySerialized);\n};\n\nexport const fetchSettings = async (): Promise<Settings> => {\n  const { payload } = await eject();\n\n  return payload || defaultSettings;\n};\n\nexport const updateSettings = async (\n  data: Partial<Settings>\n): Promise<void> => {\n  const { payload, meta } = await eject();\n\n  await inject({\n    meta,\n    payload: {\n      ...payload,\n      ...data,\n    },\n  });\n};\n","import { IKeyValue } from 'common/@interfaces';\nimport { defaultSettings } from 'common/@contants/settings';\n\nexport const preparePayload = (data: IKeyValue): IKeyValue => ({\n\t...defaultSettings,\n\t...data,\n});\n","import React, { useContext } from 'react';\nimport { defaultSettings } from 'common/@contants/settings';\n\nexport interface IKeyValue {\n  [string: string]: string | number;\n}\n\nexport interface ISettingsAction {\n  reload: () => void;\n}\n\nexport interface ISettings {\n  settings: IKeyValue;\n  actions: ISettingsAction;\n}\n\nconst initialValues = {\n  settings: defaultSettings,\n  actions: {\n    reload: () => null,\n  },\n};\n\nexport const SettingsContext = React.createContext<ISettings>({\n  ...initialValues,\n});\n\nexport const useSettings = (): ISettings => useContext(SettingsContext);\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { fetchSettings } from 'api/settings';\nimport { preparePayload } from 'common/utils/settings/utils';\nimport { ISettings, SettingsContext } from 'common/contexts/settings';\nimport { defaultSettings } from 'common/@contants/settings';\n\n\nexport const SettingsProvider: React.FC = ({ children }) => {\n  const [settingsValue, setSettingsValue] = useState<ISettings>({\n    settings: defaultSettings,\n    actions: {\n      reload: () => null,\n    },\n  });\n  const [needReload, setNeedReload] = useState(+new Date());\n  const reload = useCallback(() => {\n    setNeedReload(+new Date());\n  }, []);\n  const fetchData = () => {\n    fetchSettings().then(response => {\n      setSettingsValue({\n        ...settingsValue,\n        settings: preparePayload(response),\n        actions: {\n          ...settingsValue.actions,\n          reload: () => {\n            reload();\n\n            return null;\n          },\n        },\n      });\n    });\n  };\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    fetchData();\n  }, [needReload]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  return (\n    <>\n      <SettingsContext.Provider value={settingsValue}>\n        {children}\n      </SettingsContext.Provider>\n    </>\n  );\n};\n","import React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\ntype Props = {\n  title: string;\n  message: string;\n  onYes: <T>() => Promise<T>;\n  onNo: <T>() => Promise<T>;\n  isShow: boolean;\n};\n\nconst SimpleConfirmation: React.FC<Props> = ({\n  title,\n  message,\n  onYes,\n  onNo,\n  isShow,\n}) => (\n  <Dialog fullWidth open={isShow} keepMounted onClose={onNo}>\n    <DialogTitle>{title}</DialogTitle>\n    <DialogContent>\n      <DialogContentText>{message}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onNo} color=\"primary\">\n        Cancel\n      </Button>\n      <Button onClick={onYes} color=\"secondary\" variant=\"text\">\n        Yes\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default SimpleConfirmation;\n","import React from 'react';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\n\nexport type Props = {} & TypographyProps;\n\nconst Text: React.FC<Props> = ({\n  children,\n  align = 'left',\n  variant = 'body1',\n  ...others\n}) => (\n  <Typography align={align} variant={variant} {...others}>\n    {children}\n  </Typography>\n);\n\nexport default Text;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport Text from 'lib/text';\nimport urlManager from 'common/utils/url-manager';\n\nconst useStyles = makeStyles(theme => ({\n\tmenuButton: {\n\t\tmarginRight: theme.spacing(0),\n\t},\n\tlink: {\n\t\tcolor: 'inherit',\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n}));\n\nconst ToolbarComponent = props => {\n\tconst classes = useStyles();\n\tconst { title, isHome } = props;\n\tconst urlToHome = urlManager.folders();\n\tconst history = useHistory();\n\n\tconst showSettingsButton = !/settings/iu.test(window.location.pathname);\n\tconst onClickToSettings = e => {\n\t\te.preventDefault();\n\t\thistory.push(urlManager.settings());\n\t};\n\n\tconst linkToHome = !isHome && (\n\t\t<IconButton\n\t\t\tedge=\"start\"\n\t\t\tclassName={classes.menuButton}\n\t\t\tcolor=\"inherit\"\n\t\t\taria-label=\"home\"\n\t\t>\n\t\t\t<Link to={urlToHome} className={classes.link}>\n\t\t\t\t<HomeIcon />\n\t\t\t</Link>\n\t\t</IconButton>\n\t);\n\n\treturn (\n\t\t<AppBar position=\"static\">\n\t\t\t<Toolbar>\n\t\t\t\t<IconButton\n\t\t\t\t\tedge=\"start\"\n\t\t\t\t\tclassName={classes.menuButton}\n\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\taria-label=\"menu\"\n\t\t\t\t>\n\t\t\t\t\t<MenuIcon />\n\t\t\t\t</IconButton>\n\t\t\t\t{linkToHome}\n\t\t\t\t<Text variant=\"h6\" className={classes.title}>\n\t\t\t\t\t{title}\n\t\t\t\t</Text>\n\t\t\t\t{showSettingsButton && (\n\t\t\t\t\t<Button color=\"inherit\" onClick={onClickToSettings}>\n\t\t\t\t\t\t<Text variant=\"button\">\n\t\t\t\t\t\t\tSettings\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n};\n\nToolbarComponent.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tisHome: PropTypes.bool,\n};\n\nToolbarComponent.defaultProps = {\n\tisHome: false,\n};\n\nexport default ToolbarComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport ToolbarApp from 'app/system/toolbar';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmenuButton: {\n\t\tmarginRight: theme.spacing(0),\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n}));\n\nconst GeneralLayout = props => {\n\tconst classes = useStyles();\n\tconst { title, isHome } = props;\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<ToolbarApp title={title} isHome={isHome} />\n\t\t\t<br />\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nGeneralLayout.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tchildren: PropTypes.any.isRequired,\n\tisHome: PropTypes.bool,\n};\n\nGeneralLayout.defaultProps = {\n\tisHome: false,\n};\n\nexport default GeneralLayout;\n","export enum WordFields {\n  Id = 'id',\n  FolderId = 'folder_id',\n  WordNative = 'word_native',\n  WordTransaction = 'word_translation',\n  NumberOfAttempt = 'number_of_attempts',\n  NumberOfWins = 'number_of_wins'\n};\n\nexport type Word = {\n  [WordFields.Id]?: number;\n  [WordFields.FolderId]: number;\n  [WordFields.WordNative]: string;\n  [WordFields.WordTransaction]: string;\n  [WordFields.NumberOfAttempt]: number;\n  [WordFields.NumberOfWins]: number;\n};\n\ntype MetaWord = {\n  lastId?: number; // ?\n};\n\nexport type EjectWord = {\n  list: Word[];\n  meta: MetaWord;\n};\n","import entityTypes from 'common/@types/entity';\nimport { EjectFolder, Folder } from 'common/@interfaces/folders';\n\nexport const eject = async (): Promise<EjectFolder> => {\n  const foldersEntitySerialized = window.localStorage.getItem(\n    entityTypes.FOLDERS\n  ) as string;\n  const result = await JSON.parse(foldersEntitySerialized);\n\n  return result;\n};\n\nexport const inject = async ({ meta, list }: EjectFolder): Promise<void> => {\n  const newEntitySerialized = JSON.stringify({\n    meta,\n    list,\n  });\n\n  await window.localStorage.setItem(entityTypes.FOLDERS, newEntitySerialized);\n};\n\nexport const findById = async ({\n  id,\n}: {\n  id: number;\n}): Promise<Folder | undefined> => {\n  const { list } = await eject();\n  const result = await list.find(item => Number(item.id) === Number(id));\n\n  return result;\n};\n\nexport const findAll = async (): Promise<Folder[]> => {\n  const { list } = await eject();\n\n  return list;\n};\n\nexport const removeById = async ({ id }: { id: number }): Promise<boolean> => {\n  const { list, meta } = await eject();\n  const newList = list.filter(item => item.id !== id);\n  const hasRemoveItem = list.length !== newList.length;\n\n  if (hasRemoveItem) {\n    await inject({\n      meta,\n      list: newList,\n    });\n  }\n\n  return Promise.resolve(hasRemoveItem);\n};\n","import entityTypes from 'common/@types/entity';\nimport { EjectWord, Word, WordFields } from '../common/@interfaces/words';\nimport { Filter } from '../common/@types/general';\n\nexport const eject = async (): Promise<EjectWord> => {\n  const entitySerialized = window.localStorage.getItem(\n    entityTypes.WORDS\n  ) as string;\n  const result = await JSON.parse(entitySerialized);\n\n  return result;\n};\n\nexport const inject = async ({ meta, list }: EjectWord): Promise<void> => {\n  const newEntitySerialized = JSON.stringify({\n    meta,\n    list,\n  });\n\n  await window.localStorage.setItem(entityTypes.WORDS, newEntitySerialized);\n};\n\nexport const findById = async ({\n  id,\n}: {\n  id: number;\n}): Promise<Word | undefined> => {\n  const { list } = await eject();\n  const result = await list.find(item => Number(item.id) === Number(id));\n\n  return result;\n};\n\nexport const findAll = async ({\n  criteria = () => true,\n}: {\n  criteria: Filter<Word>;\n}): Promise<Word[]> => {\n  const { list } = await eject();\n\n  return list.filter(criteria);\n};\n\nexport const count = async ({\n  criteria = () => true,\n}: {\n  criteria: Filter<Word>;\n}): Promise<number> => {\n  const list = await findAll({ criteria });\n\n  return list.length;\n};\n\nexport const removeById = async ({ id }: { id: number }): Promise<boolean> => {\n  const { list, meta } = await eject();\n  const newList = list.filter(item => item.id !== id);\n  const hasRemoveItem = list.length !== newList.length;\n\n  if (hasRemoveItem) {\n    await inject({\n      meta,\n      list: newList,\n    });\n  }\n\n  return Promise.resolve(hasRemoveItem);\n};\n\nexport const removeByFolderId = async ({\n  folderId,\n}: {\n  folderId: number;\n}): Promise<boolean> => {\n  const { list, meta } = await eject();\n  const newList = list.filter(item => item.folder_id !== folderId);\n  const hasRemoveItem = list.length !== newList.length;\n\n  if (hasRemoveItem) {\n    await inject({\n      meta,\n      list: newList,\n    });\n  }\n\n  return hasRemoveItem;\n};\n\nexport const updateById = async ({\n  id,\n  payload,\n}: {\n  id: number;\n  payload: Partial<Word>;\n}): Promise<boolean> => {\n  const { list, meta } = await eject();\n  const word = await findById({ id });\n\n  if (!word) return false;\n\n  // TODO: need exclude ID. Via _.omit(...)\n  const newWord = {\n    ...word,\n    ...payload,\n  };\n  const newList = list.map(item => {\n    if (item[WordFields.Id] === id) return newWord;\n\n    return item;\n  });\n\n  await inject({\n    meta,\n    list: newList,\n  });\n\n  return true;\n};\n\nexport const updateByFolderId = async ({\n  folderId,\n  payload,\n}: {\n  folderId: number;\n  payload: Partial<Word>;\n}): Promise<number> => {\n  const { list, meta } = await eject();\n  let counterUpdated = 0;\n\n  const newList = list.map(word => {\n    if (word.folder_id === folderId) {\n      counterUpdated += 1;\n\n      return {\n        ...word,\n        ...payload,\n      };\n    }\n\n    return word;\n  });\n\n  if (counterUpdated > 0) {\n    await inject({\n      meta,\n      list: newList,\n    });\n  }\n\n  return counterUpdated;\n};\n","export enum ProgressGrade {\n  first = 50,\n  second = 80\n}\n\nexport type ProgressLabelProps = {\n  percentValue: number;\n  text: string;\n  variant?: 'outlined' | 'filled';\n  size?: 'medium' | 'small';\n};\n","import { useCallback, useState } from 'react';\nimport { Folder } from 'common/@interfaces/folders';\nimport { removeById } from 'api/folders';\nimport { removeByFolderId } from 'api/words';\n\ntype Input = {\n  afterSuccessHandler: () => void;\n};\n\ntype Output = {\n  confirmYes: () => Promise<any>;\n  confirmNo: () => Promise<any>;\n  removeCandidate: Folder | null;\n  setRemoveCandidate: (item: Folder | null) => void;\n};\n\nconst useRemoveFolder = ({ afterSuccessHandler }: Input): Output => {\n  const [removeCandidate, setRemoveCandidate] = useState<Folder | null>(null);\n\n  const confirmYes = useCallback(async () => {\n    if (!removeCandidate) return Promise.resolve();\n\n    try {\n      const { id } = removeCandidate;\n\n      if (!id) {\n        throw new Error('Id not defined');\n      }\n\n      return await removeById({ id })\n        .then(r => removeByFolderId({ folderId: id }))\n        .then(() => {\n          setRemoveCandidate(null);\n          afterSuccessHandler();\n        });\n    } catch (error) {\n      // TODO: Here need to show notify\n      // See: https://github.com/DenQ/lex/issues/79\n      console.error(error);\n    } finally {\n      // TODO: Here need to show notify\n      // See: https://github.com/DenQ/lex/issues/79\n    }\n\n    return Promise.resolve();\n  }, [afterSuccessHandler, removeCandidate]);\n\n  const confirmNo = useCallback(\n    () =>\n      Promise.resolve().then(() => {\n        setRemoveCandidate(null);\n      }),\n    []\n  );\n\n  return {\n    confirmYes,\n    confirmNo,\n    removeCandidate,\n    setRemoveCandidate,\n  };\n};\n\nexport default useRemoveFolder;\n","export const MAX_COUNT_WINS = 20;\n\nexport const noDataProps = {\n\ttitle: 'No Data',\n\tmessage: 'Need add words to current folder',\n};\n","const getPercent = (value1: number, value2: number, nominal = 100) =>\n\t(value1 * nominal) / value2;\n\nexport default getPercent;\n","import _ from 'lodash';\nimport { MAX_COUNT_WINS } from 'app/folder/play/constants';\nimport { Word } from 'common/@interfaces/words';\nimport getPercent from 'common/utils/get-percent';\n\ntype Input = {\n  maxCountWins: number;\n  list: Word[];\n};\n\nexport const calculateProgress = ({\n  list,\n  maxCountWins = MAX_COUNT_WINS,\n}: Input) => {\n  const maxAvailableValueList = list.length * maxCountWins;\n  const value = _.chain(list)\n    .map(item => {\n      const wins = item.number_of_wins;\n\n      if (wins >= maxCountWins) return maxCountWins;\n\n      return wins;\n    })\n    .sum()\n    .value();\n\n  return getPercent(value, maxAvailableValueList);\n};\n","import { findAll as findAllWords } from 'api/words';\nimport { Word } from 'common/@interfaces/words';\nimport { Settings } from 'common/@interfaces/settings';\nimport { Folder } from 'common/@interfaces/folders';\nimport { Filter } from 'common/@types/general';\nimport { calculateProgress } from 'common/utils/folder/folder-progress';\nimport { IKeyValue } from 'common/contexts/settings';\n\ntype Options = {\n  settings: IKeyValue;\n};\n\nconst getListWords = async (folderId: number | undefined): Promise<Word[]> => {\n  const criteria: Filter<Word> = (item): boolean => item.folder_id === folderId;\n\n  return findAllWords({ criteria });\n};\n\nexport const transform = async (\n  listFolders: Folder[],\n  { settings }: Options\n): Promise<Folder[]> => {\n  const foldersMap = new Map();\n\n  for (let i = 0; i < listFolders.length; i++) {\n    const itemFolder = listFolders[i];\n    // eslint-disable-next-line no-await-in-loop\n    const words = await getListWords(itemFolder.id);\n    const progress = calculateProgress({\n      list: words,\n      maxCountWins: (settings as Settings).play_max_count_wins,\n    });\n\n    foldersMap.set(itemFolder.id, {\n      progress,\n      words\n    });\n  }\n\n  return listFolders.map(item => ({\n    ...item,\n    progress: foldersMap.get(item.id).progress || 0,\n    words: foldersMap.get(item.id).words || []\n  }));\n};\n","import _ from 'lodash';\nimport { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { findAll } from 'api/folders';\nimport { Folder } from 'common/@interfaces/folders';\nimport { SettingsContext } from 'common/contexts/settings';\n\nimport { transform } from '../utils/transform-folders/transformFolders';\n\ntype Output = {\n  loading: boolean;\n  noData: boolean;\n  list: Folder[];\n  fetch: () => void;\n};\n\nconst useFetchFolders = (): Output => {\n  const [list, setList] = useState<Folder[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const { settings } = useContext(SettingsContext);\n\n  const fetch = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await findAll();\n      const transformedResponse = await transform(response, { settings });\n\n      setList(transformedResponse);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [settings]);\n\n  useEffect(() => {\n    !_.isEmpty(settings) && fetch();\n  }, [fetch, settings]);\n\n  const noData = !loading && list.length === 0;\n\n  return { list, loading, noData, fetch };\n};\n\nexport default useFetchFolders;\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { EventHandler } from 'common/@types/general';\nimport urlManager from 'common/utils/url-manager';\n\nconst useAddEventHandler = (): EventHandler => {\n  const history = useHistory();\n\n  return useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const url = urlManager.folder().add();\n\n      history.push(url);\n    },\n    [history]\n  );\n};\n\nexport default useAddEventHandler;\n","import React from 'react';\nimport { Box, Grid } from '@mui/material';\nimport { Button } from '@material-ui/core';\nimport { styled } from '@mui/material/styles';\n\nimport Text from 'lib/text';\nimport useAddEventHandler from '../../hooks/addEventHandler';\n\nconst ItemActionRight = styled(Grid)(({ theme }) => ({\n  textAlign: 'right',\n}));\n\nconst ItemTextRight = styled(Grid)(({ theme }) => ({\n  paddingLeft: '10px',\n}));\n\nconst BarFolders: React.FC = () => {\n  const addEventHandler = useAddEventHandler();\n\n  return (\n    <Box\n      sx={{\n        border: '1px solid rgb(224, 224, 224)',\n        borderRadius: '3px',\n        padding: '5px',\n      }}\n    >\n      <Grid container>\n        <ItemTextRight item xs={10}>\n          <Text variant=\"subtitle1\">List folders</Text>\n        </ItemTextRight>\n        <ItemActionRight item xs={2}>\n          <Button\n            onClick={addEventHandler}\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"small\"\n          >\n            Add Folder\n          </Button>\n        </ItemActionRight>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default BarFolders;\n","import React from 'react';\nimport { DataGrid, DataGridProps } from '@mui/x-data-grid';\n\nexport type Props = DataGridProps & {\n  headerColumnSimpleView?: boolean;\n  checkboxSelectionMode?: boolean;\n};\n\nconst TableComponent: React.FC<Props> = ({\n  density = 'compact',\n  pageSize = 10,\n  headerColumnSimpleView = true,\n  checkboxSelectionMode = false,\n  ...rent\n}) => {\n  const columnProps = headerColumnSimpleView\n    ? {\n        disableColumnMenu: true,\n        disableColumnFilter: true,\n        disableColumnSelector: true,\n      }\n    : {};\n  const checkboxSelectionProps = checkboxSelectionMode\n    ? {\n        disableSelectionOnClick: false,\n        checkboxSelection: true,\n      }\n    : {\n        disableSelectionOnClick: true,\n        checkboxSelection: false,\n      };\n\n  return (\n    <DataGrid\n      {...rent}\n      autoHeight\n      pageSize={pageSize}\n      density={density}\n      sx={{\n        '& .MuiDataGrid-columnHeaderTitle': {\n          fontWeight: 900,\n          color: '#555',\n        },\n      }}\n      {...columnProps}\n      {...checkboxSelectionProps}\n    />\n  );\n};\n\nexport default TableComponent;\n","import { ProgressGrade } from '../types';\n\nexport const getColor = (value: number) => {\n  if (value < ProgressGrade.first) return 'default';\n  if (value < ProgressGrade.second) return 'secondary';\n\n  return 'primary';\n};\n","import { Folder } from 'common/@interfaces/folders';\n\nexport enum ActionName {\n  edit = 'edit',\n  play = 'play',\n  remove = 'remove'\n}\n\n\nexport type RemoveHandler = (folder: Folder) => void;\n","import React from 'react';\nimport Chip from '@mui/material/Chip';\n\nimport { getColor } from './utils/getColor';\nimport { ProgressLabelProps } from './types';\n\nconst ProgressLabel: React.FC<ProgressLabelProps> = ({\n  percentValue,\n  text,\n  variant = 'filled',\n  size = 'small'\n}) => {\n  const color = getColor(percentValue);\n\n  return <Chip label={text} color={color} variant={variant} size={size} />;\n};\n\nexport default ProgressLabel;\n","import React from 'react';\n\nimport ProgressLabel from 'lib/progress/label/ProgressLabel';\n\ntype Props = {\n  value: number;\n};\n\nconst ProgressColumn: React.FC<Props> = ({ value }) => (\n  <ProgressLabel\n    variant=\"outlined\"\n    percentValue={value}\n    text={`${Math.round(value)} %`}\n  />\n);\n\nexport default ProgressColumn;\n","import { Folder } from 'common/@interfaces/folders';\nimport urlManager from 'common/utils/url-manager';\nimport { ActionName } from '../../@types/list';\n\nconst getUrl = (actionName: ActionName, row: Folder): string => {\n  if (actionName === ActionName.play) {\n    return urlManager.folder().play(row.id);\n  }\n  return urlManager.folder().edit(row.id);\n};\n\nexport default getUrl;\n","import React, { useCallback } from 'react';\nimport { Button } from '@mui/material';\nimport { useHistory } from 'react-router-dom';\n\nimport { Folder } from 'common/@interfaces/folders';\nimport getUrl from 'app/folders/@common/utils/getUrl';\nimport { ActionName, RemoveHandler } from '../../../@types/list';\n\ntype Props = {\n  row: Folder;\n  removeHandler: RemoveHandler;\n};\n\nconst SystemColumn: React.FC<Props> = ({ row, removeHandler }) => {\n  const history = useHistory();\n\n  const handleClickAction = useCallback(\n    (actionName: ActionName) => (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (actionName === ActionName.remove) {\n        removeHandler(row);\n      } else {\n        const url = getUrl(actionName, row);\n\n        history.push(url);\n      }\n    },\n    [history, row, removeHandler]\n  );\n\n  return (\n    <>\n      <Button onClick={handleClickAction(ActionName.play)} variant=\"text\">\n        Play\n      </Button>\n      <Button onClick={handleClickAction(ActionName.edit)} variant=\"text\">\n        Edit\n      </Button>\n      <Button onClick={handleClickAction(ActionName.remove)} variant=\"text\" color=\"secondary\">\n        Remove\n      </Button>\n    </>\n  );\n};\n\nexport default SystemColumn;\n","import TableFolders from './components/list';\n\n\nexport default TableFolders;\n","import React from 'react';\nimport { Folder } from 'common/@interfaces/folders';\nimport TableComponent from 'lib/tables/general';\nimport { getColumns } from './columns';\nimport { RemoveHandler } from '../../../@types/list';\n\ntype Props = {\n  list: Folder[];\n  loading: boolean;\n  removeHandler: RemoveHandler;\n};\n\nconst TableFolders: React.FC<Props> = ({ list, loading, removeHandler }) => {\n  const columns = getColumns({ removeHandler });\n\n  return <TableComponent rows={list} columns={columns} loading={loading} />;\n};\n\nexport default TableFolders;\n","import React from 'react';\nimport { GridColDef, GridRenderCellParams } from '@mui/x-data-grid';\n\nimport { Folder } from 'common/@interfaces/folders';\n\nimport ProgressColumn from './ProgressColumn';\nimport SystemColumn from './SystemColumn';\nimport { RemoveHandler } from '../../../@types/list';\n\ntype Input = {\n  removeHandler: RemoveHandler;\n};\n\nexport const getColumns = ({ removeHandler }: Input): GridColDef[] => [\n  {\n    field: 'id',\n    headerName: 'ID',\n    width: 75,\n    align: 'right',\n    headerAlign: 'right',\n    headerClassName: 'super-app-theme--header',\n  },\n  { field: 'name', headerName: 'Name', flex: 2 },\n  {\n    field: 'description',\n    headerClassName: 'super-app-theme--header',\n    headerName: 'Description',\n    flex: 3,\n  },\n  {\n    field: 'words',\n    headerName: 'Words',\n    flex: 1,\n    align: 'right',\n    headerAlign: 'right',\n    headerClassName: 'super-app-theme--header',\n    sortable: true,\n    renderCell: (cellParams: GridRenderCellParams) => (\n      <>{cellParams.value?.length || 0}</>\n    ),\n    sortComparator: (a, b, v1, v2) => {\n      const folder1 = v1.api.getRow(v1.id) as Folder;\n      const folder2 = v2.api.getRow(v2.id) as Folder;\n\n      return (folder1?.words?.length || 0) - (folder2.words?.length || 0);\n    },\n  },\n  {\n    field: 'progress',\n    headerName: 'Progress',\n    flex: 1,\n    align: 'right',\n    headerAlign: 'right',\n    headerClassName: 'super-app-theme--header',\n    sortable: true,\n    renderCell: (cellParams: GridRenderCellParams) => (\n      <ProgressColumn value={cellParams.value} />\n    ),\n    sortComparator: (a, b, v1, v2) => {\n      const folder1 = v1.api.getRow(v1.id) as Folder;\n      const folder2 = v2.api.getRow(v2.id) as Folder;\n\n      return (folder1.progress as number) - (folder2.progress as number);\n    },\n  },\n  {\n    field: 'system',\n    headerName: '',\n    flex: 2,\n    align: 'right',\n    headerAlign: 'center',\n    sortable: false,\n    renderCell: (cellParams: GridRenderCellParams) => (\n      <SystemColumn row={cellParams.row} removeHandler={removeHandler} />\n    ),\n  },\n];\n","import React from 'react';\nimport { Alert, AlertTitle } from '@mui/material';\n\nimport Text from 'lib/text';\nimport useAddEventHandler from '../../hooks/addEventHandler';\n\nimport styles from './AlertNoData.module.scss';\n\nconst AlertNoData: React.FC = () => {\n  const addEventHandler = useAddEventHandler();\n\n  return (\n    <Alert severity=\"info\" className={styles.component}>\n      <AlertTitle>\n        <b>There are no folders yet.</b>\n      </AlertTitle>\n      <Text>\n        You can{' '}\n        <i className={styles.link} onClick={addEventHandler} aria-hidden=\"true\">\n          create a new folder\n        </i>{' '}\n        and then fill it with new words to learn.\n      </Text>\n    </Alert>\n  );\n};\n\nexport default AlertNoData;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport SimpleConfirmation from 'lib/modals/SimpleConfirmation';\nimport GeneralLayout from 'app/system/layout';\n\nimport useRemoveFolder from './@common/hooks/removeFolder';\nimport useFetchFolders from './@common/hooks/fetchFolders';\nimport ActionBarFolders from './@common/components/ActionBar';\nimport TableView from './TableView';\nimport AlertNoData from './@common/components/AlertNoData';\n\nconst ListFoldersPage: React.FC = () => {\n  const { fetch, list, loading, noData } = useFetchFolders();\n  const { confirmYes, confirmNo, removeCandidate, setRemoveCandidate } =\n    useRemoveFolder({\n      afterSuccessHandler: fetch,\n    });\n\n  return (\n    <GeneralLayout title=\"Folders\" isHome>\n      <Grid container justifyContent=\"center\" spacing={2}>\n        <Grid item xs={11}>\n          <ActionBarFolders />\n        </Grid>\n      </Grid>\n      <Grid container justifyContent=\"center\" spacing={2}>\n        <Grid item xs={11}>\n          {noData && <AlertNoData />}\n          {!noData && (\n            <TableView\n              list={list}\n              loading={loading}\n              removeHandler={setRemoveCandidate}\n            />\n          )}\n        </Grid>\n      </Grid>\n      <SimpleConfirmation\n        title=\"Attention!\"\n        message=\"Do you really want to delete this folder\"\n        isShow={!!removeCandidate}\n        onYes={confirmYes}\n        onNo={confirmNo}\n      />\n    </GeneralLayout>\n  );\n};\n\nexport default ListFoldersPage;\n","import React from 'react';\nimport { Button } from '@mui/material';\n\ntype Props = {\n  row: any;\n};\n\nconst SystemColumn: React.FC<Props> = ({ row }) => {\n  const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    alert(JSON.stringify(row, null, 2));\n  };\n\n  return (\n    <>\n      <Button onClick={onClick} variant=\"text\">\n        Edit\n      </Button>\n    </>\n  );\n};\n\nexport default React.memo(SystemColumn);\n"," const randomInteger = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min\n\n export default randomInteger;\n","import faker from 'faker';\nimport randomInteger from 'common/utils/random-integer';\n\nconst getMockRows = (size: number): any =>\n  Array(size)\n    .fill(0)\n    .map((item, index) => ({\n      id: index + 1,\n      lastName: faker.name.lastName(),\n      firstName: faker.name.firstName(),\n      age: randomInteger(1, 100),\n    }));\n\nexport default getMockRows;\n","import React from 'react';\nimport TableComponent from 'lib/tables/general';\nimport { getColumns } from 'lib/tables/general/columns/columns-definitions';\nimport getMockRows from 'lib/tables/general/utsils/get-mock-rows';\n\nconst PingPage: React.FC = () => {\n  const columns = getColumns();\n  const rows = getMockRows(100);\n\n  return (\n    <>\n      <TableComponent columns={columns} rows={rows} />\n    </>\n  );\n};\n\nexport default PingPage;\n","import React from 'react';\nimport { GridColDef, GridRenderCellParams } from '@mui/x-data-grid';\nimport SystemColumn from '../components/system-column';\n\nexport const getColumns = (): GridColDef[] => [\n  { field: 'id', headerName: 'ID', width: 50 },\n  { field: 'firstName', headerName: 'First name', width: 150 },\n  { field: 'lastName', headerName: 'Last name', width: 150 },\n  {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 150,\n    sortComparator: (v1, v2): number => (Number(v1) >= Number(v2) ? -1 : 1),\n  },\n  {\n    field: 'system',\n    headerName: '',\n    width: 200,\n    renderCell: (cellParams: GridRenderCellParams) => (\n      <SystemColumn row={cellParams.row} />\n    ),\n  },\n];\n","import PropTypes from 'prop-types';\n\nexport const fieldNames = {\n\tID: 'id',\n\tFOLDER_ID: 'folder_id',\n\tWORD_NATIVE: 'word_native',\n\tWORD_TRANSLATION: 'word_translation',\n\tNUMBER_OF_ATTEMPTS: 'number_of_attempts',\n\tNUMBER_OF_WINS: 'number_of_wins',\n};\n\nexport const ModelProps = PropTypes.shape({\n\t[fieldNames.ID]: PropTypes.number.isRequired,\n\t[fieldNames.FOLDER_ID]: PropTypes.number.isRequired,\n\t[fieldNames.WORD_NATIVE]: PropTypes.string.isRequired,\n\t[fieldNames.WORD_TRANSLATION]: PropTypes.string.isRequired,\n\t[fieldNames.NUMBER_OF_ATTEMPTS]: PropTypes.number,\n\t[fieldNames.NUMBER_OF_WINS]: PropTypes.number,\n});\n\nexport const initialValues = {\n\t[fieldNames.ID]: null,\n\t[fieldNames.FOLDER_ID]: null,\n\t[fieldNames.WORD_NATIVE]: '',\n\t[fieldNames.WORD_TRANSLATION]: '',\n};\n\nexport type WordItemDTO = {\n\tid: number;\n\tfolder_id: number;\n\tword_native: string;\n\tword_translation: string;\n\tnumber_of_attempts: string;\n\tnumber_of_wins: string;\n};\n","import prepareValidationErrors from './utils/prepare-validation-errors';\nimport uniqueStringValidator from './validators/unique-string';\nimport { customMessagesMap } from './@messages';\n\nexport const validators = {\n\tuniqueStringValidator,\n};\n\nexport const utils = {\n\tprepareValidationErrors,\n};\n\nexport const messages = {\n\tcustomMap: customMessagesMap\n}\n","import _ from 'lodash';\nimport { CustomHelpers } from 'joi';\n\n/**\n * NOTE. Expected key name for callback function\n */\nconst CALLBACK_KEY = 'hasNotUnique';\n\nconst uniqueStringValidator = (value: string, helper: CustomHelpers) => {\n\tconst fieldKey = _.get(helper, 'state.path.0');\n\tif (!fieldKey) return value;\n\n\tconst hasNotUnique = _.get(helper, `prefs.context.${CALLBACK_KEY}`);\n\tif (hasNotUnique && hasNotUnique(fieldKey)) {\n\t\treturn helper.error('string.unique');\n\t}\n\treturn value;\n};\n\nexport default uniqueStringValidator;\n","import { ValidationResult } from 'joi';\nimport { CustomValidationErrors } from '../@types';\n\nconst prepareValidationErrors = ({\n\terror,\n}: ValidationResult): CustomValidationErrors => {\n\tconst errors: CustomValidationErrors = {};\n\tconst details = errors && error?.details;\n\tif (details && details?.length !== 0) {\n\t\tdetails.forEach(item => {\n\t\t\tconst { message } = item;\n\t\t\tconst key = item?.context?.key;\n\t\t\tif (key) {\n\t\t\t\terrors[key] = message;\n\t\t\t}\n\t\t});\n\t}\n\treturn errors;\n};\n\nexport default prepareValidationErrors;\n","export const customMessagesMap = {\n\t'string.unique': 'Value should be unique',\n\t'any.required': 'Field is required',\n\t'string.min': 'Length should be above 2 symbol',\n\t'string.max': 'Length cannot be more 255 symbol',\n};\n","import Joi from 'joi';\nimport { fieldNames } from 'common/@types/words';\nimport {\n\tvalidators as customValidators,\n\tmessages,\n} from 'common/modules/validation';\n\nconst validationWordSchema = Joi.object({\n\t[fieldNames.WORD_NATIVE]: Joi.string()\n\t\t.min(2)\n\t\t.max(255)\n\t\t.required()\n\t\t.custom(customValidators.uniqueStringValidator)\n\t\t.messages(messages.customMap),\n\n\t[fieldNames.WORD_TRANSLATION]: Joi.string()\n\t\t.min(2)\n\t\t.max(255)\n\t\t.required()\n\t\t.custom(customValidators.uniqueStringValidator)\n\t\t.messages(messages.customMap),\n\n\t[fieldNames.FOLDER_ID]: Joi.number(),\n\n\t[fieldNames.ID]: Joi.number(),\n});\n\nexport default validationWordSchema;\n","import _ from 'lodash';\n\nconst findByKeyValue = <T>(collection: T[], key: string, value: string) =>\n\tcollection.find((item: T): boolean => String(_.get(item, key)).toLowerCase() === value.toLowerCase());\n\nexport default findByKeyValue;\n","import _ from 'lodash';\nimport findByKeyValue from 'common/utils/find-by-key-value';\nimport { WordItemDTO } from 'common/@types/words';\n\nconst hasNotUnique = (words: Array<WordItemDTO>, values: WordItemDTO) => (key: string)=> {\n\tconst value = _.get(values, key);\n\tconst targetEntity = findByKeyValue<WordItemDTO>(\n\t\twords,\n\t\tkey,\n\t\tvalue\n\t);\n\n\treturn targetEntity && Number(targetEntity.id) !== Number(values.id);\n};\n\nexport default hasNotUnique;\n","import { useCallback } from 'react';\nimport { utils as validationUtils } from 'common/modules/validation';\nimport { WordItemDTO } from 'common/@types/words';\nimport validationWordSchema from '../../validationSchema';\nimport hasNotUnique from '../../utils/has-not-unique';\n\ntype Input = {\n\twords: Array<any>;\n};\n\ntype OutputValidateFn = {\n\t[string: string]: string;\n};\n\ntype Values = WordItemDTO;\n\ntype Output = {\n\tvalidate: (values: Values) => OutputValidateFn;\n};\n\nconst useValidate = ({ words }: Input): Output => {\n\tconst validate = useCallback(\n\t\t(values: Values): OutputValidateFn => {\n\n\t\t\tconst errors = {};\n\t\t\tconst validationErrors = validationWordSchema.validate(values, {\n\t\t\t\tcontext: { hasNotUnique: hasNotUnique(words, values) },\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...errors,\n\t\t\t\t...validationUtils.prepareValidationErrors(validationErrors),\n\t\t\t};\n\t\t},\n\t\t[words]\n\t);\n\n\treturn {\n\t\tvalidate,\n\t};\n};\n\nexport default useValidate;\n","import { eject as ejectWords, inject as injectWords } from 'api/words';\nimport { fieldNames } from 'common/@types/words';\n\nexport const submitHandler = ({ onSuccessSubmit }) => async (values, form) => {\n\tconst { list, meta } = await ejectWords();\n\tconst isNew = !values[fieldNames.ID];\n\n\tif (isNew) {\n\t\tmeta.lastId++;\n\t\tlist.push({\n\t\t\t...values,\n\t\t\t[fieldNames.ID]: meta.lastId,\n\t\t\t[fieldNames.NUMBER_OF_ATTEMPTS]: 0,\n\t\t\t[fieldNames.NUMBER_OF_WINS]: 0,\n\t\t});\n\t} else {\n\t\tlist.forEach((item, index) => {\n\t\t\tif (Number(item.id) === Number(values[fieldNames.ID])) {\n\t\t\t\tlist[index][fieldNames.WORD_NATIVE] = values[fieldNames.WORD_NATIVE];\n\t\t\t\tlist[index][fieldNames.WORD_TRANSLATION] =\n\t\t\t\t\tvalues[fieldNames.WORD_TRANSLATION];\n\t\t\t\tlist[index][fieldNames.NUMBER_OF_ATTEMPTS] =\n\t\t\t\t\tvalues[fieldNames.NUMBER_OF_ATTEMPTS] || 0;\n\t\t\t\tlist[index][fieldNames.NUMBER_OF_WINS] =\n\t\t\t\t\tvalues[fieldNames.NUMBER_OF_WINS] || 0;\n\t\t\t}\n\t\t});\n\t}\n\n\tawait injectWords({\n\t\tmeta,\n\t\tlist,\n\t});\n\n\tawait onSuccessSubmit({ values, form });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextComponent = props => {\n  const {\n    input: { value },\n    placeholder,\n  } = props;\n\n  return (\n    <span>\n      {placeholder} : {value}\n    </span>\n  );\n};\n\nTextComponent.propTypes = {\n  readOnly: PropTypes.bool,\n  placeholder: PropTypes.string.isRequired,\n};\n\nTextComponent.defaultProps = {\n  readOnly: false,\n};\n\nexport default TextComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'react-final-form';\nimport { TextField } from 'mui-rff';\n\nimport TextComponent from 'app/folder/form/components/text-component';\n\nconst Component = ({ disabled, fieldName, readOnly, placeholder }) => {\n\tif (!readOnly) {\n\t\treturn (\n\t\t\t<TextField\n\t\t\t\tname={fieldName}\n\t\t\t\tlabel={placeholder}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tsize=\"small\"\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Field\n\t\t\tname={fieldName}\n\t\t\tcomponent={TextComponent}\n\t\t\tplaceholder={placeholder}\n\t\t\tdisabled={disabled}\n\t\t\tlabel={placeholder}\n\t\t/>\n\t);\n};\n\nComponent.propTypes = {\n\treadOnly: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n};\n\nComponent.defaultProps = {\n\treadOnly: false,\n\tdisabled: false,\n};\n\nexport default Component;\n","import React from 'react';\nimport { Form } from 'react-final-form';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport RefreshContext from 'common/contexts/refetch-context';\nimport { fieldNames, initialValues } from 'common/@types/words';\n\nimport useValidate from './hooks/validate';\nimport { submitHandler } from './utils';\nimport InputControl from './components/input-control';\n\nconst useStyles = makeStyles({\n\tid: {\n\t\tdisplay: 'none',\n\t},\n});\n\nconst EntityForm = ({ initialValues, readOnly, handleRemove, words }) => {\n\tconst classes = useStyles();\n\tconst { wordsReload, setWordsReload } = React.useContext(RefreshContext);\n\tconst { validate } = useValidate({ words });\n\n\tconst onSuccessSubmit = ({ form }) => {\n\t\tconsole.log('success', form);\n\t\tsetTimeout(() => {\n\t\t\tform.restart(initialValues);\n\t\t\tsetWordsReload(wordsReload + 1);\n\t\t}, 0);\n\t};\n\tconst onClickRemove = () => {\n\t\tconst id = initialValues[fieldNames.ID];\n\t\thandleRemove({ id });\n\t};\n\t/* eslint-disable react-hooks/exhaustive-deps */\n\tconst isCanRemove = React.useMemo(() => !!initialValues[fieldNames.ID], [\n\t\tinitialValues[fieldNames.ID],\n\t]);\n\t/* eslint-enable react-hooks/exhaustive-deps */\n\n\treturn (\n\t\t<Form\n\t\t\tonSubmit={submitHandler({ onSuccessSubmit })}\n\t\t\tvalidate={validate}\n\t\t\tinitialValues={initialValues}\n\t\t\trender={({ handleSubmit, valid, dirty }) => (\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<Grid container spacing={5}>\n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t<div className={classes.id}>\n\t\t\t\t\t\t\t\t<label>ID</label>\n\t\t\t\t\t\t\t\t<InputControl\n\t\t\t\t\t\t\t\t\tfieldName={fieldNames.ID}\n\t\t\t\t\t\t\t\t\tplaceholder=\"NEW\"\n\t\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\tid=\"new\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className={classes.id}>\n\t\t\t\t\t\t\t\t<label>Folder ID</label>\n\t\t\t\t\t\t\t\t<InputControl\n\t\t\t\t\t\t\t\t\tfieldName={fieldNames.FOLDER_ID}\n\t\t\t\t\t\t\t\t\tplaceholder=\"NEW\"\n\t\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t<InputControl\n\t\t\t\t\t\t\t\tfieldName={fieldNames.WORD_NATIVE}\n\t\t\t\t\t\t\t\tplaceholder=\"Native\"\n\t\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t<InputControl\n\t\t\t\t\t\t\t\tfieldName={fieldNames.WORD_TRANSLATION}\n\t\t\t\t\t\t\t\tplaceholder=\"Translation\"\n\t\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item xs={1}>\n\t\t\t\t\t\t\t<Button type=\"submit\" color=\"primary\" disabled={!dirty || !valid}>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t{isCanRemove && (\n\t\t\t\t\t\t\t<Grid item xs={1}>\n\t\t\t\t\t\t\t\t<Button type=\"button\" color=\"secondary\" onClick={onClickRemove}>\n\t\t\t\t\t\t\t\t\tRemove\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Grid>\n\t\t\t\t</form>\n\t\t\t)}\n\t\t/>\n\t);\n};\n\nEntityForm.propTypes = {\n\tinitialValues: PropTypes.shape({\n\t\t[fieldNames.ID]: PropTypes.number,\n\t\t[fieldNames.FOLDER_ID]: PropTypes.number,\n\t\t[fieldNames.WORD_NATIVE]: PropTypes.string,\n\t\t[fieldNames.WORD_TRANSLATION]: PropTypes.string,\n\t}),\n\treadOnly: PropTypes.bool,\n\thandleRemove: PropTypes.func,\n};\n\nEntityForm.defaultProps = {\n\tinitialValues,\n\treadOnly: false,\n};\n\nexport default EntityForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport Text from 'lib/text';\nimport { fieldNames } from 'common/@types/words';\n\nconst Component = props => {\n\tconst {\n\t\tdata: {\n\t\t\t[fieldNames.WORD_NATIVE]: native,\n\t\t\t[fieldNames.WORD_TRANSLATION]: translation,\n\t\t},\n\t} = props;\n\n\treturn (\n\t\t<ListItem button>\n\t\t\t<Text variant=\"body1\">\n\t\t\t\t{native} - {translation}\n\t\t\t</Text>\n\t\t</ListItem>\n\t);\n};\n\nComponent.propTypes = {\n\tdata: PropTypes.shape({\n\t\t[fieldNames.ID]: PropTypes.number,\n\t\t[fieldNames.FOLDER_ID]: PropTypes.number,\n\t\t[fieldNames.WORD_NATIVE]: PropTypes.string,\n\t\t[fieldNames.WORD_TRANSLATION]: PropTypes.string,\n\t}).isRequired,\n};\n\nComponent.defaultProps = {};\n\nexport default Component;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport { fieldNames } from 'common/@types/words';\nimport Form from '../form';\nimport Details from './details';\n\nconst PresenterComponent = props => {\n  const { data, isNew, folderId, readOnly, handleRemove, words } = props;\n\n  if (isNew) {\n    const initialValues = {\n      [fieldNames.FOLDER_ID]: folderId,\n    };\n\n    return <Form initialValues={initialValues} words={words} />;\n  }\n\n  const initialValues = {\n    [fieldNames.ID]: data[fieldNames.ID],\n    // [fieldNames.FOLDER_ID]: data[fieldNames.FOLDER_ID],\n    [fieldNames.FOLDER_ID]: folderId,\n    [fieldNames.WORD_NATIVE]: data[fieldNames.WORD_NATIVE],\n    [fieldNames.WORD_TRANSLATION]: data[fieldNames.WORD_TRANSLATION],\n  };\n\n  if (readOnly) {\n    return <Details data={initialValues} />;\n  }\n\n  return (\n    <Form\n      initialValues={initialValues}\n      handleRemove={handleRemove}\n      words={words}\n    />\n  );\n};\n\nPresenterComponent.propTypes = {\n  folderId: PropTypes.number.isRequired,\n  handleRemove: PropTypes.func,\n  isNew: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nPresenterComponent.defaultProps = {\n  isNew: false,\n  readOnly: false,\n  handleRemove: _.noop,\n};\n\nexport default PresenterComponent;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport Box from '@material-ui/core/Box';\n\nimport Text from 'lib/text';\nimport { removeById } from 'api/words';\nimport { useGetList } from 'app/words/list/hooks/get-list';\nimport { orderListByName } from 'app/words/list/utils/ordering';\n\nimport PresenterWord from '../presenter';\n\nconst WordsListPage = ({ folderId, readOnly }) => {\n  const [needRefresh, setNeedRefresh] = React.useState(null);\n  const prepareList = useCallback(list => orderListByName({ list }), []);\n\n  const list = useGetList({\n    folderId,\n    needRefresh,\n    prepareList,\n  });\n\n  const isShowListHeader = React.useMemo(\n    () => (list.length > 0 && !readOnly) || list.length > 0,\n    [readOnly, list.length]\n  );\n\n  const handleRemove = ({ id }) => {\n    removeById({ id })\n      .then(() => {\n        setNeedRefresh(+new Date());\n      })\n      .catch(e => {\n        console.log('Error', e);\n      });\n  };\n\n  return (\n    <Box m={2}>\n      {isShowListHeader && <Text variant=\"button\">List words</Text>}\n      <List>\n        {!readOnly && (\n          <PresenterWord folderId={folderId} isNew words={list} key=\"new\" />\n        )}\n        {list.map(item => (\n          <PresenterWord\n            folderId={folderId}\n            data={item}\n            key={item.id}\n            readOnly={readOnly}\n            handleRemove={handleRemove}\n            words={list}\n          />\n        ))}\n      </List>\n    </Box>\n  );\n};\n\nWordsListPage.propTypes = {\n  folderId: PropTypes.number.isRequired,\n  readOnly: PropTypes.bool,\n};\n\nWordsListPage.defaultProps = {\n  readOnly: false,\n};\n\nexport default WordsListPage;\n","import _ from 'lodash';\n\nimport { WordItemDTO } from 'common/@types/words';\n\ntype Input = {\n  list: Array<WordItemDTO>;\n};\n\ntype Output = Array<WordItemDTO>;\n\nexport const orderListByName = ({ list }: Input): Output =>\n  _.orderBy(list, ['word_native'], ['asc']);\n","import { useContext, useEffect, useState } from 'react';\n\nimport { findAll } from 'api/words';\nimport { Word } from 'common/@interfaces/words';\nimport { Filter } from 'common/@types/general';\nimport RefreshContext from 'common/contexts/refetch-context';\n\ntype K = () => boolean;\n\ntype Input = {\n  folderId: number;\n  needRefresh: string;\n  prepareList?: (list: Word[]) => Word[];\n};\n\ntype Output = Word[];\n\nexport const useGetList = ({\n  folderId,\n  needRefresh,\n  prepareList = l => l,\n}: Input): Output => {\n  const { wordsReload } = useContext(RefreshContext);\n  const [list, setList] = useState<Word[]>([]);\n\n  useEffect(() => {\n    const criteria: Filter<Word> = (item): boolean =>\n      Number(item.folder_id) === Number(folderId);\n\n    findAll({ criteria } as { criteria: K }).then(results => {\n      setList(prepareList(results));\n    });\n  }, [folderId, wordsReload, needRefresh, prepareList]);\n\n  return list;\n};\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nconst Component = props => <>{props.children}</>;\n\nComponent.propTypes = {};\n\nComponent.defaultProps = {};\n\nexport default Component;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport Text from 'lib/text';\n\nconst useStyles = makeStyles((theme, ...o) => ({\n\tlink: {\n\t\tcolor: 'inherit',\n\t\ttextDecoration: 'none',\n\t},\n}));\n\nconst Component = ({ data }) => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Breadcrumbs\n\t\t\tseparator={<NavigateNextIcon fontSize=\"small\" />}\n\t\t\taria-label=\"breadcrumb\"\n\t\t>\n\t\t\t{data.map((item, index) => {\n\t\t\t\tif (!item.to) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Text color=\"textPrimary\" key=\"last\" variant=\"body1\">\n\t\t\t\t\t\t\t{item.title}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\tto={item.to}\n\t\t\t\t\t\tclassName={classes.link}\n\t\t\t\t\t\tkey={item.to}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text variant=\"body2\">{item.title}</Text>\n\t\t\t\t\t</Link>\n\t\t\t\t);\n\t\t\t})}\n\t\t</Breadcrumbs>\n\t);\n};\n\nexport const BreadcrumbsPropTypes = PropTypes.arrayOf(\n\tPropTypes.shape({\n\t\tto: PropTypes.string,\n\t\ttitle: PropTypes.string.isRequired,\n\t})\n);\n\nComponent.propTypes = {\n\tdata: BreadcrumbsPropTypes,\n};\n\nComponent.defaultProps = {\n\tdata: [],\n};\n\nexport default Component;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\n\nconst Transition = React.forwardRef((\n\t// eslint-disable-next-line react/require-default-props\n\tprops: TransitionProps & { children?: React.ReactElement<any, any> },\n\tref: React.Ref<unknown>\n) => <Slide direction=\"up\" ref={ref} {...props} timeout={300} />);\n\nexport interface Props {\n\topen: boolean;\n\ttitle: string;\n\tmessage: string;\n\tonCancel?: () => void;\n\tonYes?: () => void;\n\tsize?: 'xl' | 'lg' | 'md' | 'sm' | 'xs' | undefined;\n}\n\nexport const ConfirmationModal = ({\n\topen,\n\ttitle,\n\tmessage,\n\tonCancel,\n\tonYes,\n\tsize = 'xs',\n}: Props) => (\n\t<Dialog\n\t\tmaxWidth={size}\n\t\tfullWidth\n\t\topen={open}\n\t\tTransitionComponent={Transition}\n\t\tkeepMounted\n\t\tonClose={onCancel}\n\t\taria-labelledby=\"alert-dialog-slide-title\"\n\t\taria-describedby=\"alert-dialog-slide-description\"\n\t>\n\t\t<DialogTitle id=\"alert-dialog-slide-title\">{title}</DialogTitle>\n\t\t<DialogContent>\n\t\t\t<DialogContentText id=\"alert-dialog-slide-description\">\n\t\t\t\t{message}\n\t\t\t</DialogContentText>\n\t\t</DialogContent>\n\t\t<DialogActions>\n\t\t\t<Button onClick={onCancel} color=\"primary\">\n\t\t\t\tCancel\n\t\t\t</Button>\n\t\t\t<Button onClick={onYes} color=\"secondary\">\n\t\t\t\tYes\n\t\t\t</Button>\n\t\t</DialogActions>\n\t</Dialog>\n);\n","export const controlNames = {\n\tTO_EDIT: 'toEdit',\n\tTO_REMOVE: 'toRemove',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\n\nimport { removeById } from 'api/folders';\nimport { removeByFolderId } from 'api/words';\nimport urlManager from 'common/utils/url-manager';\nimport BreadCrumbs, {\n  BreadcrumbsPropTypes,\n} from 'common/components/bread-crumbs';\nimport { useConfirmationModal } from 'lib/modals/confirmation/hook';\n\nimport { ConfirmationModal } from 'lib/modals/confirmation';\nimport { controlNames } from '../../constants';\n\nconst Component = props => {\n  const history = useHistory();\n  const { id, controls, breadcrumbsProps } = props;\n  const toEditHandler = () => {\n    const to = urlManager.folder().edit(id);\n\n    history.push(to);\n  };\n\n  const toRemoveHandler = ({ reset }) => {\n    removeById({ id })\n      .then(r => removeByFolderId({ folderId: id }))\n      .then(r => {\n        reset();\n        const to = urlManager.folders();\n\n        history.push(to);\n      })\n      .catch(e => {\n        console.log('Catch error', e);\n      });\n  };\n\n  const { open, toOpen, onYes, onCancel } = useConfirmationModal({\n    onConfirmation: toRemoveHandler,\n  });\n\n  const onClickToRemove = () => {\n    toOpen();\n  };\n\n  const collectionControls = [];\n\n  if (controls.includes(controlNames.TO_EDIT)) {\n    collectionControls.push(\n      <Button color=\"primary\" onClick={toEditHandler} key=\"to-edit\">\n        To Edit\n      </Button>\n    );\n  }\n\n  if (controls.includes(controlNames.TO_REMOVE)) {\n    collectionControls.push(\n      <Button color=\"secondary\" onClick={onClickToRemove} key=\"to-remove\">\n        Remove\n      </Button>\n    );\n  }\n  const breadcrumbs = breadcrumbsProps && (\n    <BreadCrumbs data={breadcrumbsProps} />\n  );\n\n  return (\n    <>\n      <Box m={2}>{breadcrumbs}</Box>\n      <Box m={2}>{collectionControls}</Box>\n      <ConfirmationModal\n        open={open}\n        title=\"Remove folder\"\n        message=\"Are you sure you want to delete the folder?\"\n        onYes={onYes}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nComponent.propTypes = {\n  id: PropTypes.number,\n  controls: PropTypes.array,\n  breadcrumbsProps: BreadcrumbsPropTypes,\n};\n\nComponent.defaultProps = {\n  id: null,\n  controls: [],\n};\n\nexport default Component;\n","import { useCallback, useState } from 'react';\n\nexport type OnConfirmationType = (params: { reset: () => void }) => void;\n\ninterface Input {\n\tonConfirmation: OnConfirmationType;\n}\n\ninterface Output {\n\topen: boolean;\n\ttoOpen: () => void;\n\tonYes: () => void;\n\tonCancel: () => void;\n}\n\nexport const useConfirmationModal = ({ onConfirmation }: Input): Output => {\n\tconst [open, setOpen] = useState<boolean>(false);\n\tconst reset = useCallback(() => {\n\t\tsetOpen(false);\n\t}, []);\n\tconst toOpen = useCallback(() => {\n\t\tsetOpen(true);\n\t}, []);\n\tconst onYes = useCallback(() => {\n\t\tonConfirmation({\n\t\t\treset,\n\t\t});\n\t}, [onConfirmation, reset]);\n\tconst onCancel = useCallback(() => {\n\t\treset();\n\t}, [reset]);\n\n\treturn {\n\t\topen,\n\t\ttoOpen,\n\t\tonYes,\n\t\tonCancel,\n\t};\n};\n","export const fieldNames = {\n\tID: 'id',\n\tNAME: 'name',\n\tDESCRIPTION: 'description',\n};\n\nexport const initialValues = {\n\t[fieldNames.ID]: null,\n\t[fieldNames.NAME]: '',\n\t[fieldNames.DESCRIPTION]: '',\n};\n","import { eject as ejectFolders, inject as injectFolders } from 'api/folders';\nimport { fieldNames } from 'common/@types/folder';\n\nexport const submitHandler =\n  ({ onSuccessSubmit }) =>\n  async values => {\n    const { list, meta } = await ejectFolders();\n    const isNew = !values[fieldNames.ID];\n\n    if (isNew) {\n      meta.lastId++;\n      list.push({\n        ...values,\n        id: meta.lastId,\n      });\n    } else {\n      list.forEach((item, index) => {\n        if (Number(item.id) === Number(values[fieldNames.ID])) {\n          list[index][fieldNames.NAME] = values[fieldNames.NAME];\n          list[index][fieldNames.DESCRIPTION] = values[fieldNames.DESCRIPTION];\n        }\n      });\n    }\n\n    await injectFolders({\n      meta,\n      list,\n    });\n\n    await onSuccessSubmit();\n  };\n","import React from 'react';\nimport { Form } from 'react-final-form';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { fieldNames, initialValues } from 'common/@types/folder';\nimport urlManager from 'common/utils/url-manager';\nimport InputControl from 'app/words/form/components/input-control';\n\nimport { submitHandler } from './utils';\n\nconst useStyles = makeStyles({\n\tid: {\n\t\tdisplay: 'none',\n\t},\n});\n\nconst EntityForm = ({ initialValues, readOnly }) => {\n\tconst classes = useStyles();\n\tconst history = useHistory();\n\tconst validate = () => {};\n\n\tconst onSuccessSubmit = () => {\n\t\thistory.push(urlManager.folders());\n\t};\n\n\treturn (\n\t\t<Form\n\t\t\tonSubmit={submitHandler({ onSuccessSubmit })}\n\t\t\tvalidate={validate}\n\t\t\tinitialValues={initialValues}\n\t\t\trender={({ handleSubmit, dirty }) => (\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<Grid container spacing={5}>\n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t<div className={classes.id}>\n\t\t\t\t\t\t\t\t<InputControl\n\t\t\t\t\t\t\t\t\tfieldName={fieldNames.ID}\n\t\t\t\t\t\t\t\t\tplaceholder=\"NEW\"\n\t\t\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t<InputControl\n\t\t\t\t\t\t\t\tfieldName={fieldNames.NAME}\n\t\t\t\t\t\t\t\tplaceholder=\"Folder Name\"\n\t\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t<InputControl\n\t\t\t\t\t\t\t\tfieldName={fieldNames.DESCRIPTION}\n\t\t\t\t\t\t\t\tplaceholder=\"Description\"\n\t\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t{!readOnly && (\n\t\t\t\t\t\t\t\t<Button type=\"submit\" color=\"primary\" disabled={!dirty}>\n\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</form>\n\t\t\t)}\n\t\t/>\n\t);\n};\n\nEntityForm.propTypes = {\n\tinitialValues: PropTypes.shape({\n\t\tid: null,\n\t\tname: PropTypes.string,\n\t\tdescription: PropTypes.string,\n\t}),\n\treadOnly: PropTypes.bool,\n};\n\nEntityForm.defaultProps = {\n\tinitialValues,\n\treadOnly: false,\n};\n\nexport default EntityForm;\n","import { useEffect, useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport { findById } from 'api/folders';\nimport urlManager from 'common/utils/url-manager';\nimport { Folder } from 'common/@interfaces/folders';\n\nexport const useFindById = ({\n  match: {\n    params: { id },\n  },\n}: RouteComponentProps): {\n  id: number;\n  entity: Folder | null;\n} => {\n  const [entity, setEntity] = useState<Folder | null>(null);\n\n  useEffect(() => {\n    findById({ id }).then(modelResult => {\n      setEntity(modelResult || null);\n    });\n  }, [id]);\n\n  return {\n    entity,\n    id: Number(id),\n  };\n};\n\nexport const buildBreadCrumbsProps = ({\n  folderName,\n  actionName,\n}: {\n  folderName: string;\n  actionName: string;\n}) => [\n  {\n    to: urlManager.home(),\n    title: 'Home',\n  },\n  {\n    to: undefined,\n    title: folderName ? `Folder (${folderName})` : 'Folder',\n  },\n  {\n    to: undefined,\n    title: actionName,\n  },\n];\n","import React from 'react';\n\nimport GeneralLayout from 'app/system/layout';\nimport WordsList from 'app/words/list';\nimport Box from '@material-ui/core/Box';\n\nimport Layout from '../components/layout';\nimport Header from '../components/header';\nimport Form from '../form';\nimport { useFindById, buildBreadCrumbsProps } from '../utils';\nimport { controlNames } from '../constants';\n\nconst Component = ({ match }) => {\n  const { entity, id } = useFindById({ match });\n\n  if (!entity) {\n    return 'Loading';\n  }\n\n  const initialValues = {\n    ...entity,\n  };\n\n  const breadcrumbsProps = buildBreadCrumbsProps({\n    folderName: entity.name,\n    actionName: 'Details',\n  });\n\n  return (\n    <GeneralLayout title=\"Details Folder\">\n      <Layout>\n        <Header\n          id={id}\n          controls={[controlNames.TO_EDIT, controlNames.TO_REMOVE]}\n          breadcrumbsProps={breadcrumbsProps}\n        />\n        <Box m={2}>\n          <Form initialValues={initialValues} readOnly />\n          <WordsList folderId={entity.id} readOnly />\n        </Box>\n      </Layout>\n    </GeneralLayout>\n  );\n};\n\nComponent.propTypes = {};\n\nComponent.defaultProps = {};\n\nexport default Component;\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport WordsList from 'app/words/list';\nimport GeneralLayout from 'app/system/layout';\nimport Header from '../components/header';\n\nimport Layout from '../components/layout';\nimport FolderForm from '../form';\nimport { useFindById, buildBreadCrumbsProps } from '../utils';\nimport { controlNames } from '../constants';\n\nconst Component = ({ match }) => {\n  const { entity, id } = useFindById({ match });\n\n  if (!entity) {\n    return 'Loading';\n  }\n\n  const initialValues = {\n    ...entity,\n  };\n\n  const breadcrumbsProps = buildBreadCrumbsProps({\n    folderName: entity.name,\n    actionName: 'Edit',\n  });\n\n  return (\n    <GeneralLayout title=\"Edit Folder\">\n      <Layout>\n        <Header\n          id={id}\n          controls={[controlNames.TO_REMOVE]}\n          breadcrumbsProps={breadcrumbsProps}\n        />\n        <FolderForm initialValues={initialValues} />\n        <WordsList folderId={entity.id} />\n      </Layout>\n    </GeneralLayout>\n  );\n};\n\nComponent.propTypes = {};\n\nComponent.defaultProps = {};\n\nexport default Component;\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport GeneralLayout from 'app/system/layout';\n\nimport Header from '../components/header';\nimport Layout from '../components/layout';\nimport Form from '../form';\nimport { buildBreadCrumbsProps } from '../utils';\n\nconst Component = () => {\n  const breadcrumbsProps = buildBreadCrumbsProps({\n    actionName: 'Add',\n  });\n\n  return (\n    <GeneralLayout title=\"Add Folder\">\n      <Layout>\n        <Header controls={[]} breadcrumbsProps={breadcrumbsProps} />\n        <Form />\n      </Layout>\n    </GeneralLayout>\n  );\n};\n\nComponent.propTypes = {};\n\nComponent.defaultProps = {};\n\nexport default Component;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Text from 'lib/text';\n\nconst NoDataComponent = ({ title, message }) => (\n  <Box m={2}>\n    <Text color=\"primary\" variant=\"h5\" align=\"center\">\n      {title}\n    </Text>\n    <Text color=\"textSecondary\" align=\"center\" paragraph>\n      {message}\n    </Text>\n  </Box>\n);\n\nNoDataComponent.propTypes = {\n  title: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n};\n\nNoDataComponent.defaultProps = {};\n\nexport default NoDataComponent;\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\n\nimport Text from 'lib/text';\n\nimport { RestartFolderHandler } from '../../types';\n\ntype Props = {\n  restartFolderHandler: RestartFolderHandler;\n};\n\nconst PlayExplored: React.FC<Props> = ({ restartFolderHandler }) => (\n  <Box m={2}>\n    <Text color=\"primary\" variant=\"h5\" align=\"center\">\n      This folder explored\n    </Text>\n    <Text color=\"textSecondary\" align=\"center\" paragraph>\n      You can restart this folder\n    </Text>\n    <Grid container justifyContent=\"center\">\n      <Grid item>\n        <Button color=\"secondary\" size=\"small\" onClick={restartFolderHandler}>\n          Restart\n        </Button>\n      </Grid>\n    </Grid>\n  </Box>\n);\n\nexport default PlayExplored;\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport { Word, WordFields } from 'common/@interfaces/words';\nimport Text from 'lib/text';\nimport { SelectWordHandler } from '../../types';\n\nimport styles from './ListPlay.module.scss';\n\ntype Props = {\n  targetWord: Word;\n  list: Word[];\n  vector: boolean;\n  handleSelectWord: SelectWordHandler;\n  errorItem?: Word | null;\n};\n\nconst PlayList: React.FC<Props> = ({\n  targetWord,\n  list,\n  handleSelectWord,\n  vector,\n  errorItem,\n}) => {\n  const onSelectWord = (selectedWord: Word) => () => {\n    handleSelectWord({\n      targetWord,\n      selectedWord,\n    });\n  };\n  const getTitle = (item: Word, vector: boolean): string =>\n    item[vector ? WordFields.WordTransaction : WordFields.WordNative];\n\n  const targetTitle = React.useMemo(\n    () => getTitle(targetWord, !vector),\n    [vector, targetWord]\n  );\n  const itemVariant = 'button';\n\n  return (\n    <List className={styles.component}>\n      <ListItem button key={targetWord[WordFields.Id]}>\n        <Text color=\"primary\" variant={itemVariant}>\n          {targetTitle}\n        </Text>\n      </ListItem>\n      {list.map(item => {\n        const isError = errorItem\n          ? item[WordFields.Id] === errorItem[WordFields.Id]\n          : false;\n\n        return (\n          <ListItem button key={item.id} onClick={onSelectWord(item)}>\n            <Text\n              color=\"textSecondary\"\n              variant={itemVariant}\n              className={isError ? 'item-error' : undefined}\n            >\n              {getTitle(item, vector)}\n            </Text>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nPlayList.defaultProps = {\n  errorItem: null,\n};\n\nexport default PlayList;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Box from '@mui/material/Box';\n\nimport Text from 'lib/text';\n\ntype Props = {\n  value: number;\n};\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n});\n\nexport const PlayStatisticInfo: React.FC<Props> = ({ value }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Box display=\"flex\" alignItems=\"center\">\n        <Box width=\"100%\" mr={1}>\n          <LinearProgress variant=\"determinate\" value={value} />\n        </Box>\n        <Box minWidth={35}>\n          <Text variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n            value\n          )}%`}</Text>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default PlayStatisticInfo;\n","import urlManager from 'common/utils/url-manager';\n\ntype Input = {\n  folderId: number;\n  folderName: string;\n};\n\nconst buildBreadCrumbsProps = ({ folderId, folderName }: Input) => [\n  {\n    to: urlManager.home(),\n    title: 'Home',\n  },\n  {\n    to: urlManager.folder().show(folderId),\n    title: `Folder (${folderName})`,\n  },\n  {\n    to: undefined,\n    title: 'Play',\n  },\n];\n\nexport default buildBreadCrumbsProps;\n","import { updateById } from 'api/words';\nimport { Word, WordFields } from 'common/@interfaces/words';\n\ntype Input = {\n  targetWord: Word;\n  isSuccess: boolean;\n};\n\nconst setRate = ({ targetWord, isSuccess }: Input) => {\n  const { id, number_of_wins: wins, number_of_attempts: attempts } = targetWord;\n\n  if (!id) return Promise.resolve(false);\n\n  return updateById({\n    id,\n    payload: {\n      ...targetWord,\n      [WordFields.NumberOfAttempt]: attempts + 1,\n      [WordFields.NumberOfWins]: isSuccess ? wins + 1 : wins,\n    },\n  });\n};\n\nexport default setRate;\n","import { useCallback } from 'react';\n\nimport { Word, WordFields } from 'common/@interfaces/words';\n\nimport { SelectWordHandler } from '../types';\nimport setRate from '../utils/setRate';\n\ntype Input = {\n  setErrorItem: (v: Word | null) => void;\n  setNeedReload: (v: number | null) => void;\n};\n\ntype Output = SelectWordHandler;\n\nconst useSelectWordHandler = ({ setErrorItem, setNeedReload }: Input): Output =>\n  useCallback(\n    ({ targetWord, selectedWord }): void => {\n      const isSuccess =\n        targetWord[WordFields.Id] === selectedWord[WordFields.Id];\n\n      setRate({\n        targetWord,\n        isSuccess,\n      })\n        .then(() => {\n          if (!isSuccess) {\n            setErrorItem(selectedWord);\n          }\n          setTimeout(() => {\n            setNeedReload(+new Date());\n            setErrorItem(null);\n          }, isSuccess ? 300 : 1000);\n        })\n        .catch(e => {\n          console.error(e);\n        });\n    },\n    [setErrorItem, setNeedReload]\n  );\n\nexport default useSelectWordHandler;\n","import { Word } from 'common/@interfaces/words';\n\nconst handleSortList = (item: Word) => {\n  const wins = item.number_of_wins || 0;\n  const attempts = item.number_of_attempts || 0;\n\n  if (wins === 0 || attempts === 0) return 0;\n\n  return wins;\n};\n\nexport default handleSortList;\n","import _ from 'lodash';\n\nimport { Word } from 'common/@interfaces/words';\nimport handleSortList from './handleSortList';\n\ntype Input = {\n  list: Word[];\n};\n\nconst getWeakestWord = ({ list }: Input): Word | null =>\n  _.chain(list).minBy(handleSortList).value();\n\nexport default getWeakestWord;\n","import _ from 'lodash';\n\nimport { Word } from 'common/@interfaces/words';\nimport handleSortList from './handleSortList';\n\ntype Input = {\n  list: Word[];\n  limit?: number;\n};\n\nconst getRange = ({ list, limit = 10 }: Input) =>\n  _.chain(list)\n    .sortBy(handleSortList)\n    .slice(0, limit)\n    .sortBy(Math.random)\n    .value();\n\nexport default getRange;\n","import { useEffect, useState } from 'react';\n\nimport { findAll } from 'api/words';\nimport { Filter } from 'common/@types/general';\nimport { Word, WordFields } from 'common/@interfaces/words';\nimport { SettingsFields } from 'common/@interfaces/settings';\nimport { calculateProgress } from 'common/utils/folder/folder-progress';\nimport { useSettings } from 'common/contexts/settings';\n\nimport getWeakestWord from '../utils/getWeakestWord';\nimport getRange from '../utils/getRange';\n\ntype Input = {\n  id: number;\n  needReload: number | null;\n};\n\ntype Output = {\n  list: Word[];\n  targetWord: Word | null;\n  vector: boolean;\n  progress: number;\n  noData: boolean;\n};\n\n// TODO: Need useReducer\nconst useFetchList = ({ id, needReload }: Input): Output => {\n  const [list, setList] = useState<Word[]>([]);\n  const [targetWord, setTargetWord] = useState<Word | null>(null);\n  const [vector, setVector] = useState(true);\n  const [progress, setProgress] = useState(0);\n  const [noData, setNoData] = useState(false);\n  const { settings } = useSettings();\n\n  // TODO: Here two rerenders. Need use fetch method and use useEffect as didMount\n  useEffect(() => {\n    const criteria: Filter<Word> = (item: Word): boolean =>\n      item[WordFields.FolderId] === id;\n\n    findAll({ criteria }).then(list => {\n      const targetWord = getWeakestWord({ list });\n      const newList = getRange({\n        list,\n        limit: settings[SettingsFields.PlayCountWords] as number,\n      });\n      const progress = calculateProgress({\n        list,\n        maxCountWins: settings[SettingsFields.PlayMaxCountWins] as number,\n      });\n\n      if (list.length === 0) {\n        setNoData(true);\n      }\n\n      setList(newList);\n      targetWord && setTargetWord(targetWord);\n      setVector(Math.random() >= 0.5);\n      setProgress(progress);\n    });\n  }, [id, needReload, settings]);\n\n  return {\n    list,\n    targetWord,\n    vector,\n    progress,\n    noData,\n  };\n};\n\nexport default useFetchList;\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\n\nimport { Word } from 'common/@interfaces/words';\nimport GeneralLayout from 'app/system/layout';\nimport NoData from 'common/components/no-data';\n\nimport PlayExplored from './components/explored';\nimport PlayListWords from './components/list';\nimport Progress from './components/statistic-info';\nimport Header from '../components/header';\nimport Layout from '../components/layout';\nimport { useFindById } from '../utils';\nimport buildBreadCrumbsProps from './utils/buildBreadCrumbsProps';\nimport { noDataProps } from './constants';\nimport useRestartFolder from './hooks/restartFolderHandler';\nimport useSelectWordHandler from './hooks/selectWordHandler';\nimport useFetchList from './hooks/fetchList';\n\ntype Props = RouteComponentProps & {};\n\nconst PlayPage: React.FC<Props> = ({ match }) => {\n  const { entity, id } = useFindById({ match });\n  const [needReload, setNeedReload] = useState<number | null>(null);\n  const [errorItem, setErrorItem] = useState<Word | null>(null);\n  const { list, targetWord, vector, progress, noData } = useFetchList({\n    id,\n    needReload,\n  });\n\n  const restartFolderHandler = useRestartFolder({ id, setNeedReload });\n\n  const handleSelectWord = useSelectWordHandler({\n    setErrorItem,\n    setNeedReload,\n  });\n\n  if (!entity || !targetWord) {\n    if (!noData) return <>Loading</>;\n  }\n\n  const breadcrumbsProps = buildBreadCrumbsProps({\n    folderId: id,\n    folderName: entity?.name || '?',\n  });\n\n  return (\n    <GeneralLayout title=\"Play Folder\">\n      <Layout>\n        <Header id={id} breadcrumbsProps={breadcrumbsProps} />\n        {noData && <NoData {...noDataProps} />}\n        {!noData && progress < 100 && (\n          <>\n            <Progress value={progress} />\n            <Box m={2}>\n              <PlayListWords\n                list={list}\n                targetWord={targetWord!}\n                handleSelectWord={handleSelectWord}\n                vector={vector}\n                errorItem={errorItem}\n              />\n            </Box>\n          </>\n        )}\n        {!noData && progress >= 100 && (\n          <PlayExplored restartFolderHandler={restartFolderHandler} />\n        )}\n      </Layout>\n    </GeneralLayout>\n  );\n};\n\nexport default PlayPage;\n","import { useCallback } from 'react';\n\nimport { updateByFolderId } from 'api/words';\nimport { Word, WordFields } from 'common/@interfaces/words';\nimport { RestartFolderHandler } from '../types';\n\ntype Input = {\n  id: number;\n  setNeedReload: (v: number | null) => void;\n};\n\ntype Output = RestartFolderHandler;\n\nexport default ({ id, setNeedReload }: Input): Output => {\n  const restartFolderHandler: RestartFolderHandler = useCallback(() => {\n    const payload = {\n      [WordFields.NumberOfAttempt]: 0,\n      [WordFields.NumberOfWins]: 0,\n    } as Partial<Word>;\n\n    updateByFolderId({ folderId: id, payload })\n      .then(() => {\n        setNeedReload(+new Date());\n      })\n      .catch(e => {\n        console.error(e);\n      });\n  }, [id, setNeedReload]);\n\n  return restartFolderHandler;\n};\n","import React from 'react';\n// import { OnSubmitType } from 'lib/form/base-form';\ntype ButtonEvent = React.MouseEvent<HTMLButtonElement>;\n\nexport interface Props {\n  formProps: object;\n  onSubmit: (args: any) => void;\n  // onSubmit: OnSubmitType;\n}\n\nexport const BaseFormHeader: React.FC<Props> = props => {\n  const onClick = (e: ButtonEvent) => {\n    e.preventDefault();\n    props.onSubmit(props);\n  };\n\n  return (\n    <button type=\"submit\" onClick={onClick}>\n      Submit\n    </button>\n  );\n};\n","import React from 'react';\nimport { Form } from 'react-final-form';\nimport { makeValidate } from 'mui-rff';\nimport { AnySchema } from 'yup';\nimport { BaseFormHeader } from './components/footer';\n\nexport type OnSubmitType = (params: object) => void;\n\nexport interface Props {\n\t// onSubmit?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n\tonSubmit?: OnSubmitType;\n\tinitialValues: object;\n\tvalidationSchema?: AnySchema;\n\t// Footer?: React.FC;\n\tFooter?: any;\n\tdebug?: boolean;\n}\n\nexport const BaseForm: React.FC<Props> = ({\n\tinitialValues,\n\tonSubmit,\n\tdebug = false,\n\tchildren,\n\tvalidationSchema = {},\n\tFooter = BaseFormHeader,\n}) => (\n\t<Form\n\t\tvalidate={makeValidate(validationSchema)}\n\t\tinitialValues={initialValues}\n\t\tonSubmit={() => {}}\n\t\trender={formProps => (\n\t\t\t// @ts-ignore\n\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t{debug && <pre>{JSON.stringify(formProps, null, 2)}</pre>}\n\t\t\t\t{children}\n\t\t\t\t <Footer formProps={formProps} onSubmit={onSubmit} />\n\t\t\t</form>\n\t\t)}\n\t/>\n);\n","import React from 'react';\nimport { TextField as MUITextField, showErrorOnBlur } from 'mui-rff';\n\nexport interface Props {\n\tname: string;\n\tlabel: string;\n\tplaceholder?: string;\n\treadOnly?: boolean;\n}\n\nexport const TextField = ({\n\tname,\n\tlabel,\n\tplaceholder = '',\n\treadOnly = false,\n}: Props) => (\n\t<MUITextField\n\t\tname={name}\n\t\tlabel={label}\n\t\tplaceholder={placeholder}\n\t\tdisabled={readOnly}\n\t\tshowError={showErrorOnBlur}\n\t/>\n);\n","export const fieldNames = {\n\tPLAY_COUNT_WORDS: 'play_count_words',\n\tPLAY_MAX_COUNT_WINS: 'play_max_count_wins',\n};\n\nexport const initialValues = {\n\t[fieldNames.PLAY_COUNT_WORDS]: 10,\n\t[fieldNames.PLAY_MAX_COUNT_WINS]: 10,\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport { OnSubmitType } from 'lib/form/base-form';\n\ntype FormProps = {\n\tdirty: boolean,\n\tvalid: boolean,\n};\n\nexport interface Props {\n\tformProps: FormProps;\n\tonSubmit: OnSubmitType\n}\n\nexport const FormFooter = ({ formProps, onSubmit }: Props) => {\n\tconst { valid, dirty } = formProps;\n\tconst onClick = (e: any): void => {\n\t\te && e.preventDefault();\n\t\tonSubmit({ formProps })\n\t};\n\n\treturn (\n\t\t<Button\n\t\t\ttype=\"submit\"\n\t\t\tonClick={onClick}\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={!dirty || !valid}\n\t\t>\n\t\t\tSubmit\n\t\t</Button>\n\t);\n};\n","export const errorMessages = {\n\tIS_REQUIRED: 'Is Required',\n\tSHOULD_BE_POSITIVE: 'Should be positive',\n\tSHOULD_BE_INTEGER: 'Should be integer',\n};\n","import * as Yup from 'yup';\nimport { errorMessages } from 'common/@messages/errors';\nimport { fieldNames } from 'common/@types/settings';\n\nexport default Yup.object().shape({\n\t[fieldNames.PLAY_COUNT_WORDS]: Yup.number()\n\t\t.required(errorMessages.IS_REQUIRED)\n\t\t.positive(errorMessages.SHOULD_BE_POSITIVE)\n\t\t.integer(errorMessages.SHOULD_BE_INTEGER),\n\t[fieldNames.PLAY_MAX_COUNT_WINS]: Yup.number()\n\t\t.required(errorMessages.IS_REQUIRED)\n\t\t.positive(errorMessages.SHOULD_BE_POSITIVE)\n\t\t.integer(errorMessages.SHOULD_BE_INTEGER),\n});\n","export const fieldLabels = {\n\tPLAY_COUNT_WORDS: 'Count words',\n\tPLAY_MAX_COUNT_WINS: 'Max count wins',\n};\n","import { updateSettings } from 'api/settings';\nimport { IKeyValue } from 'common/@interfaces';\nimport { preparePayload } from 'common/utils/settings/utils';\n\ntype TInput = {\n\tpayload: IKeyValue;\n\tafterSuccessSubmit: () => void;\n\tafterErrorSubmit: () => void;\n};\n\nexport const changeSettings = async ({\n\tpayload,\n\tafterSuccessSubmit,\n\tafterErrorSubmit,\n}: TInput): Promise<void> => {\n\ttry {\n\t\tawait updateSettings({\n\t\t\t...preparePayload(payload),\n\t\t});\n\t\tafterSuccessSubmit();\n\t} catch (e) {\n\t\tafterErrorSubmit();\n\t} finally {\n\t\tconsole.log('Fin!');\n\t}\n};\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n// import { makeStyles } from '@material-ui/core/styles';\n\nimport { BaseForm } from 'lib/form/base-form';\nimport { TextField } from 'lib/form/text-field';\nimport { fieldNames } from 'common/@types/settings';\nimport { useSettings } from 'common/contexts/settings';\n\nimport { FormFooter } from './components/footer';\nimport validationSchema from './validation-schema';\nimport { fieldLabels } from './constants';\nimport { changeSettings } from './utils';\nimport { useFetch } from './hooks/fetch';\n// import Slider from '@material-ui/core/Slider';\n\n// import urlManager from 'common/utils/url-manager';\n\n// const useStyles = makeStyles({\n// \troot: {\n// \t\twidth: 300,\n// \t},\n// });\n\ntype Props = {};\n\nconst SettingsForm: React.FC<Props> = () => {\n\t// const classes = useStyles();\n\tconst { loading, initValues, reload } = useFetch();\n\tconst { actions } = useSettings();\n\n\tconst onSuccessSubmit = (a: any): void => {\n\t\tconst { formProps } = a;\n\n\t\tchangeSettings({\n\t\t\tafterSuccessSubmit: () => {\n\t\t\t\treload();\n\t\t\t\tactions.reload();\n\t\t\t},\n\t\t\tafterErrorSubmit: () => {\n\t\t\t\tconsole.log('error');\n\t\t\t},\n\t\t\tpayload: formProps.values,\n\t\t});\n\t};\n\n\tif (loading) {\n\t\treturn <>loading...</>;\n\t}\n\n\treturn (\n\t\t<BaseForm\n\t\t\tonSubmit={onSuccessSubmit}\n\t\t\tinitialValues={initValues}\n\t\t\tvalidationSchema={validationSchema}\n\t\t\tFooter={FormFooter}\n\t\t>\n\t\t\t<Grid container>\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tname={fieldNames.PLAY_COUNT_WORDS}\n\t\t\t\t\t\tlabel={fieldLabels.PLAY_COUNT_WORDS}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tname={fieldNames.PLAY_MAX_COUNT_WINS}\n\t\t\t\t\t\tlabel={fieldLabels.PLAY_MAX_COUNT_WINS}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</BaseForm>\n\t);\n};\n\nexport default SettingsForm;\n","import { useEffect, useMemo, useState } from 'react';\nimport { fetchSettings } from 'api/settings';\nimport { initialValues } from 'common/@types/settings';\n\nexport type TSettings = {\n  [string: string]: string | number;\n};\n\nexport type TOutput = {\n  loading: boolean;\n  reload: () => void;\n  settings: TSettings;\n  initValues: TSettings;\n};\n\nexport const useFetch = (): TOutput => {\n  const [loading, setLoading] = useState(false);\n  const [settings, setSettings] = useState({});\n  const [needReload, setNeedReload] = useState(+new Date());\n\n  const reload = () => {\n    setNeedReload(+new Date());\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    fetchSettings().then(payload => {\n      setTimeout(() => {\n        setSettings(payload);\n        setLoading(false);\n      }, 200);\n    });\n  }, [needReload]);\n\n  const initValues = useMemo(\n    () => ({\n      ...initialValues,\n      ...settings,\n    }),\n    [settings]\n  );\n\n  return {\n    loading,\n    reload,\n    settings,\n    initValues,\n  };\n};\n","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport BreadCrumbs from 'common/components/bread-crumbs';\nimport { TBreadCrumb } from '../../utils';\n\ntype Props = {\n\tbreadCrumbs: Array<TBreadCrumb>;\n};\n\nexport const Header: React.FC<Props> = ({ breadCrumbs }) => (\n\t<Box m={2}>\n\t\t<BreadCrumbs data={breadCrumbs} />\n\t</Box>\n);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport GeneralLayout from '../system/layout';\nimport SettingsForm from './form';\nimport { Header } from './components/header';\nimport { buildBreadCrumbs } from './utils';\n\ntype Props = {};\n\nconst SettingsPage: React.FC<Props> = () => (\n\t<GeneralLayout title=\"Settings\">\n\t\t<Header breadCrumbs={buildBreadCrumbs()} />\n\t\t<Grid container justify=\"center\" spacing={2}>\n\t\t\t<SettingsForm />\n\t\t</Grid>\n\t</GeneralLayout>\n);\n\nexport default SettingsPage;\n","import urlManager from 'common/utils/url-manager';\n\nexport type TBreadCrumb = {\n\tto?: string;\n\ttitle: string;\n};\n\nexport const buildBreadCrumbs = ():Array<TBreadCrumb> => [\n\t{\n\t\tto: urlManager.home(),\n\t\ttitle: 'Home',\n\t},\n\t{\n\t\tto: undefined,\n\t\ttitle: 'Settings',\n\t},\n];\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport RefreshContext from 'common/contexts/refetch-context';\nimport { urls } from 'common/utils/url-manager';\nimport { SettingsProvider } from 'common/context-providers/settings';\n\nimport ListFolders from 'app/folders';\nimport PingPage from 'app/ping';\nimport ShowFolder from './app/folder/show';\nimport EditFolder from './app/folder/edit';\nimport AddFolder from './app/folder/add';\nimport PlayFolder from './app/folder/play';\nimport SettingsPage from './app/settings';\n\nfunction App() {\n\n  const [wordsReload, setWordsReload] = React.useState(0);\n  const [foldersReload, setFoldersReload] = React.useState(0);\n\n  const refreshContextValue = {\n    wordsReload,\n    setWordsReload,\n    foldersReload,\n    setFoldersReload,\n  };\n\n  return (\n      <RefreshContext.Provider value={refreshContextValue}>\n        <SettingsProvider>\n          <Router>\n            <Switch>\n              <Route path={urls.FOLDER_SHOW} component={ShowFolder} />\n              <Route path={urls.FOLDER_ADD} component={AddFolder} />\n              <Route path={urls.FOLDER_EDIT} component={EditFolder} />\n              <Route path={urls.FOLDER_PLAY} component={PlayFolder} />\n              <Route path={urls.FOLDERS} component={ListFolders} />\n              <Route path={urls.SETTINGS} component={SettingsPage} />\n              <Route path={urls.PING} component={PingPage} />\n              <Route path=\"/\" component={ListFolders} />\n            </Switch>\n          </Router>\n        </SettingsProvider>\n      </RefreshContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n\t\t),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.',\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@mui/material';\nimport { createTheme } from '@mui/material/styles';\nimport type {} from '@mui/x-data-grid/themeAugmentation';\n\nimport initializeLocalstorage from 'common/utils/initializer/local-storage';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst theme = createTheme({});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n  () => {\n    initializeLocalstorage();\n  }\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"AlertNoData_component__1CFxm\",\"link\":\"AlertNoData_link__1_lSY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"ListPlay_component__1d69O\"};"],"sourceRoot":""}